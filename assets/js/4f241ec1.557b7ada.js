"use strict";(self.webpackChunksimpleiot=self.webpackChunksimpleiot||[]).push([[9230],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={},i="Authentication",s={unversionedId:"documentation/api/auth",id:"documentation/api/auth",title:"Authentication",description:"Access to all API methods require authentication using JWT tokens. The built-in way to",source:"@site/docs/documentation/api/auth.md",sourceDirName:"documentation/api",slug:"/documentation/api/auth",permalink:"/simpleiot-build/docs/documentation/api/auth",draft:!1,tags:[],version:"current",frontMatter:{}},l={},p=[{value:"Obtaining ID Tokens",id:"obtaining-id-tokens",level:2},{value:"Using ID Tokens",id:"using-id-tokens",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Access to all API methods require authentication using ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JWT tokens"),". The built-in way to\nobtain these is by logging into ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"},"Cognito Userpools"),"\ncreated by default when the system is installed."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html"},"Check here")," for\ndetails on how to obtain these tokens."),(0,r.kt)("h2",{id:"obtaining-id-tokens"},"Obtaining ID Tokens"),(0,r.kt)("p",null,"This is the easiest way to obtain a JWT token for use in making a request in Python. To start, you will need to pass\nalong the ",(0,r.kt)("em",{parentName:"p"},"Cognito Client ID"),", obtained when the system is first installed and stored in the project ",(0,r.kt)("em",{parentName:"p"},"config.json"),"\nfile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import boto3\n\n...\n  cognito = boto3.client('cognito-idp')\n\n  response = cognito.initiate_auth(\n      ClientId=client_id,\n      AuthFlow='USER_PASSWORD_AUTH',\n      AuthParameters={\n          \"USERNAME\": username,\n          \"PASSWORD\": password\n      }\n  )\n  id_token = resp['AuthenticationResult']['IdToken']\n\n")),(0,r.kt)("p",null,"The simplest way to achieve the same result in Javascript is by using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/index.html"},"AWS SDK for Javascript"),"\nor ",(0,r.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/lib/auth/getting-started/q/platform/js/#create-authentication-service"},"Amplify Authentication component\nlibraries"),"."),(0,r.kt)("p",null,"NOTE that if you have installed the ",(0,r.kt)("strong",{parentName:"p"},"SimpleIOT")," back-end, you do not need to install the Amplify CLI and back-end services and can\njump ahead to ",(0,r.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/lib/auth/start/q/platform/js/#configure-your-application"},"Create or re-use existing back-end: Configure your application"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'\nvar AWS  = require("aws-sdk");\nvar jwtToken;\n\n// You need to provide COGNITO_USER_POOL, COGNITO_CLIENT_ID, and COGNITO_POOL_REGION\n// These are all in the config.json file after a SimpleIOT installation.\n\n  const AmazonCognitoIdentity = require("amazon-cognito-identity-js");\n  const poolData = {\n    UserPoolId: COGNITO_USER_POOL,\n    ClientId: COGNITO_CLIENT_ID,\n  };\n  const userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n\n  const cognitoUser = userPool.getCurrentUser();\n  if (cognitoUser != null) {\n    cognitoUser.getSession(function (err, result) {\n      if (result) {\n        jwtToken = result.getIdToken().getJwtToken(); // use this later to make REST calls\n        ...\n      }\n    })\n  }\n\n')),(0,r.kt)("h2",{id:"using-id-tokens"},"Using ID Tokens"),(0,r.kt)("p",null,"To make use of the ID token using the popular requests package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import requests\n\n...\n\n  headers = {\n      "Authorization": id_token\n  }\n\n  response = requests.request(method, url, headers=headers, **kwargs)\n\n...\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"...\n\nvar AWS  = require(\"aws-sdk\");\n\nvar headers = new Headers();\nheaders.append(\"Authorization\", \"Bearer \" + jwtToken); // Note single-space after 'Bearer'\n\nvar requestOptions = {\n  method: 'GET',\n  headers: headers,\n  redirect: 'follow'\n};\n\n\nfetch(url, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n\n")))}u.isMDXComponent=!0}}]);