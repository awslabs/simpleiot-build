"use strict";(self.webpackChunksimpleiot=self.webpackChunksimpleiot||[]).push([[1303],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),c=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(g,i(i({ref:t},l),{},{components:a})):n.createElement(g,i({ref:t},l))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6908:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={id:"concepts",title:"Basic Concepts"},i=void 0,s={unversionedId:"workshops/starter/concepts",id:"workshops/starter/concepts",title:"Basic Concepts",description:"Background",source:"@site/docs/workshops/starter/concepts.md",sourceDirName:"workshops/starter",slug:"/workshops/starter/concepts",permalink:"/docs/workshops/starter/concepts",draft:!1,tags:[],version:"current",frontMatter:{id:"concepts",title:"Basic Concepts"},sidebar:"theSidebar",previous:{title:"SimpleIOT Starter Set",permalink:"/docs/workshops/intro"},next:{title:"Unboxing the Equipment",permalink:"/docs/workshops/starter/unboxing"}},p={},c=[{value:"Background",id:"background",level:2},{value:"Taxonomy",id:"taxonomy",level:2}],l={toc:c};function m(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/img/intro/intro-diagram-09.png",width:"70%"})),(0,r.kt)("h2",{id:"background"},"Background"),(0,r.kt)("p",null,"SimpleIOT allows you to connect a variety of devices to the cloud. The data can go in both directions if needed."),(0,r.kt)("p",{align:"center"},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Intro 1",src:a(3099).Z,width:"427",height:"427"}))),(0,r.kt)("p",null,"All services and data are owned by you and maintained in your private AWS account. You can have one or more accounts to keep the Data separate."),(0,r.kt)("p",{align:"center"},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Intro 1",src:a(6750).Z,width:"354",height:"498"}))),(0,r.kt)("p",null,"Each account is associated with a single ",(0,r.kt)("strong",{parentName:"p"},"Team")," which you can name to distinguish them from each other. Each ",(0,r.kt)("em",{parentName:"p"},"Team")," maintains its own stack of services, users, devices, and data. "),(0,r.kt)("p",null,"Depends on how you like to organize your projects. If just starting out, one ",(0,r.kt)("strong",{parentName:"p"},"Team")," is good enough. But as you go along, you may want to have, for example, separate ",(0,r.kt)("strong",{parentName:"p"},"dev"),", ",(0,r.kt)("strong",{parentName:"p"},"test"),", and ",(0,r.kt)("strong",{parentName:"p"},"production")," Teams."),(0,r.kt)("p",{align:"center"},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Intro 1",src:a(9847).Z,width:"662",height:"430"}))),(0,r.kt)("p",null,"Note that a single Team can handle many different types of devices. But the main association to keep in mind is:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"One AWS Account ","<","=",">"," One Team"),".")),(0,r.kt)("p",null,"If you want to access different Teams from a single desktop or laptop, you can toggle back and forth between them easily from the command line."),(0,r.kt)("p",{align:"center"},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Intro 1",src:a(2123).Z,width:"423",height:"421"}))),(0,r.kt)("p",null,"Each ",(0,r.kt)("strong",{parentName:"p"},"Team")," maintains its own list of users, databases, logs, APIs, device certificates, etc."),(0,r.kt)("h2",{id:"taxonomy"},"Taxonomy"),(0,r.kt)("p",null,"SimpleIOT has a basic notion of how it organizes the data."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/img/intro/intro-diagram-05.png",width:"70%"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each ",(0,r.kt)("strong",{parentName:"li"},"Team")," can have one or more ",(0,r.kt)("strong",{parentName:"li"},"Projects"),". "),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"Project")," allows you to define one or more ",(0,r.kt)("strong",{parentName:"li"},"Models"),"."),(0,r.kt)("li",{parentName:"ul"},"Each ",(0,r.kt)("strong",{parentName:"li"},"Model")," describes a single type of device. "),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"model")," can have one or more ",(0,r.kt)("strong",{parentName:"li"},"Datatypes"),". A ",(0,r.kt)("strong",{parentName:"li"},"Datatype")," is a named value for each piece of information you want to exchange with the device.")),(0,r.kt)("p",null,"For example, you can create a ",(0,r.kt)("strong",{parentName:"p"},"Project")," to build a variety of hand-held thermometers. For the first one, you define a ",(0,r.kt)("strong",{parentName:"p"},"Model")," and give it a name. That model will be exchanging three attributes or ",(0,r.kt)("strong",{parentName:"p"},"Datatypes")," with the cloud:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/img/intro/intro-diagram-06.png",width:"60%"})),(0,r.kt)("p",null,"In the above example, your project is named ",(0,r.kt)("strong",{parentName:"p"},"HeatMeasure"),", and a model in that project is called ",(0,r.kt)("strong",{parentName:"p"},"Therm-01"),". The device wants to exchange three values with the cloud: ",(0,r.kt)("strong",{parentName:"p"},"status"),", ",(0,r.kt)("strong",{parentName:"p"},"temperature"),", and ",(0,r.kt)("strong",{parentName:"p"},"battery"),". In the future, you can have a ",(0,r.kt)("em",{parentName:"p"},"Therm-02"),", ",(0,r.kt)("em",{parentName:"p"},"Therm-03"),", etc. "),(0,r.kt)("p",null,"Once you've defined your ",(0,r.kt)("em",{parentName:"p"},"Model")," and ",(0,r.kt)("em",{parentName:"p"},"Datatype"),", you can now virtually stamp out one or more instances. An instance of a ",(0,r.kt)("em",{parentName:"p"},"Model")," is called a ",(0,r.kt)("strong",{parentName:"p"},"Device"),". Each ",(0,r.kt)("em",{parentName:"p"},"Device")," needs to have its own unique ",(0,r.kt)("strong",{parentName:"p"},"serial number")," so you can tell multiple ",(0,r.kt)("em",{parentName:"p"},"Devices")," apart."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/img/intro/intro-diagram-07.png",width:"60%"})),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In object-oriented parlance, a ",(0,r.kt)("strong",{parentName:"p"},"Model")," is a ",(0,r.kt)("em",{parentName:"p"},"class"),". Each time you ",(0,r.kt)("em",{parentName:"p"},"instantiate")," a Model, you're creating a ",(0,r.kt)("strong",{parentName:"p"},"device"),", which is an ",(0,r.kt)("em",{parentName:"p"},"instance")," of that class.")),(0,r.kt)("p",null,"Remember how each ",(0,r.kt)("em",{parentName:"p"},"Model")," had one or more ",(0,r.kt)("em",{parentName:"p"},"Datatypes"),"? Each ",(0,r.kt)("em",{parentName:"p"},"Device")," will also have its own instance of those, called ",(0,r.kt)("strong",{parentName:"p"},"Data"),". "),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/img/intro/intro-diagram-08.png",width:"60%"})),(0,r.kt)("p",null,"You can reference each data element of each unique device by its:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("p",null,"Project (name) - Model (name) - Device (serial number) - Data (name)")),(0,r.kt)("p",null,"Putting it all together:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/img/intro/intro-diagram-09.png",width:"70%"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Congratulations"),": You should now have a foundation of how SimpleIOT works. Let's move on to installing it."))}m.isMDXComponent=!0},3099:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/intro-diagram-01-055a4aeb37d3364cc0bd2e8fa15cecb1.png"},6750:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/intro-diagram-02-a4e461ba1aab3e56f5d590edeba716b0.png"},9847:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/intro-diagram-03-f3921374b9e5d4c345cd34f7211c206a.png"},2123:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/intro-diagram-04-1b35d5ad03ca17b9bc4e242927faaa93.png"}}]);